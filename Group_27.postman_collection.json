{
	"info": {
		"_postman_id": "0c61bc13-7ab4-4c22-ae6a-b61b44e6ce30",
		"name": "Group_27",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Lesson Van",
			"item": [
				{
					"name": "Задания по Postman_1",
					"item": [
						{
							"name": "Get",
							"item": [
								{
									"name": "HW_1",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://162.55.220.72:5005/get_method?name=str&age=int",
											"protocol": "http",
											"host": [
												"162",
												"55",
												"220",
												"72"
											],
											"port": "5005",
											"path": [
												"get_method"
											],
											"query": [
												{
													"key": "name",
													"value": "str"
												},
												{
													"key": "age",
													"value": "int"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "EP_3",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://162.55.220.72:5005/object_info_1?name=Anton&age=26&weight=180",
											"protocol": "http",
											"host": [
												"162",
												"55",
												"220",
												"72"
											],
											"port": "5005",
											"path": [
												"object_info_1"
											],
											"query": [
												{
													"key": "name",
													"value": "Anton"
												},
												{
													"key": "age",
													"value": "26"
												},
												{
													"key": "weight",
													"value": "180"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "EP_4",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://162.55.220.72:5005/object_info_2?name=Anton&age=26&salary=1500",
											"protocol": "http",
											"host": [
												"162",
												"55",
												"220",
												"72"
											],
											"port": "5005",
											"path": [
												"object_info_2"
											],
											"query": [
												{
													"key": "name",
													"value": "Anton"
												},
												{
													"key": "age",
													"value": "26"
												},
												{
													"key": "salary",
													"value": "1500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "EP_5",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://162.55.220.72:5005/object_info_3?name=Anton&age=26&salary=100",
											"protocol": "http",
											"host": [
												"162",
												"55",
												"220",
												"72"
											],
											"port": "5005",
											"path": [
												"object_info_3"
											],
											"query": [
												{
													"key": "name",
													"value": "Anton"
												},
												{
													"key": "age",
													"value": "26"
												},
												{
													"key": "salary",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "EP_6",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://162.55.220.72:5005/object_info_4?name=Anton&age=26&salary=333",
											"protocol": "http",
											"host": [
												"162",
												"55",
												"220",
												"72"
											],
											"port": "5005",
											"path": [
												"object_info_4"
											],
											"query": [
												{
													"key": "name",
													"value": "Anton"
												},
												{
													"key": "age",
													"value": "26"
												},
												{
													"key": "salary",
													"value": "333"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Post",
							"item": [
								{
									"name": "EP_2",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "name",
												"value": "str",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "Anton",
													"type": "text"
												},
												{
													"key": "age",
													"value": "26",
													"type": "text"
												},
												{
													"key": "salary",
													"value": "1500",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "http://162.55.220.72:5005/user_info_3",
											"protocol": "http",
											"host": [
												"162",
												"55",
												"220",
												"72"
											],
											"port": "5005",
											"path": [
												"user_info_3"
											]
										}
									},
									"response": []
								},
								{
									"name": "EP_7",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "name",
													"value": "Anton",
													"type": "text"
												},
												{
													"key": "age",
													"value": "26",
													"type": "text"
												},
												{
													"key": "salary",
													"value": "999",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "http://162.55.220.72:5005 /user_info_2",
											"protocol": "http",
											"host": [
												"162",
												"55",
												"220",
												"72"
											],
											"port": "5005 ",
											"path": [
												"user_info_2"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Задания по Postman_2",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Yelka 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://162.55.220.72:5005/get_method?name=Salvador&age=24",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"get_method"
									],
									"query": [
										{
											"key": "name",
											"value": "Salvador"
										},
										{
											"key": "age",
											"value": "24"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Lesson two",
			"item": [
				{
					"name": "Practic",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var respData = pm.response.json();",
											"var reqData = request.data;",
											"",
											"let req_salary = +reqData.salary",
											"let req_u_age = +reqData.age",
											"let req_qa_salary_after_6_months = +respData.qa_salary_after_6_months",
											"",
											"//console.log(\"start_qa_salary = \" + respData.start_qa_salary)",
											"console.log(typeof(req_salary) + \" == \" + req_qa_salary_after_6_months)",
											"",
											"pm.test(\"start_qa_salary\", function () {",
											"    pm.expect(respData.start_qa_salary).to.eql(req_salary);",
											"});",
											"pm.test(\"u_age\", function () {",
											"    pm.expect(respData.person.u_age).to.eql(req_u_age);",
											"});",
											"pm.test(\"u_name\", function () {",
											"    pm.expect(respData.person.u_name [1]).to.eql(req_salary);",
											"});",
											"",
											"pm.environment.set(\"salary\", req_qa_salary_after_6_months);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "Anton",
											"type": "text"
										},
										{
											"key": "age",
											"value": "26",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "35000",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://162.55.220.72:5005/user_info_2",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"user_info_2"
									]
								}
							},
							"response": []
						},
						{
							"name": "User_info_2",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "123",
											"type": "text"
										},
										{
											"key": "age",
											"value": "4",
											"type": "text"
										},
										{
											"key": "salary",
											"value": "{{salary}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}/user_info_3",
									"host": [
										"{{URL}}"
									],
									"path": [
										"user_info_3"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://162.55.220.72:5005/first",
									"protocol": "http",
									"host": [
										"162",
										"55",
										"220",
										"72"
									],
									"port": "5005",
									"path": [
										"first"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1_test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "two_test_New",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () { ",
									"    pm.response.to.have.status(200);     // 2. Статус код 200 ",
									"}); ",
									" ",
									"let testBody = pm.response.json();//Спарсить response body в json. ",
									" ",
									"pm.test(\"Your test name\", function () {   ",
									"    pm.expect(testBody.name).to.eql(\"AntonEnot\"); //Проверить, что name в ответе равно name s request (name вбить руками.) ",
									"}); ",
									" ",
									" pm.test(\"Your test age\", function () {   ",
									"    pm.expect(testBody.age).to.eql(\"30\"); //Проверить, что age в ответе равно age s request (age вбить руками.) ",
									"}); ",
									" ",
									"pm.test(\"Your test salary\", function () {   ",
									"    pm.expect(testBody.salary).to.eql(5000); //Проверить, что salary в ответе равно salary s request (salary вбить руками.) ",
									"}); ",
									" ",
									" ",
									" ",
									"let reqBody_test = request.data; // 7. Спарсить request. ",
									"console.log(reqBody_test) // проверка ",
									"let req_name = reqBody_test.name  // Спарсить request(name) ",
									"let req_salary = +reqBody_test.salary // Спарсить request(salary) ",
									"let req_u_age = reqBody_test.age // Спарсить request(age) ",
									" ",
									"pm.test(\"Name\", function () {   ",
									"    pm.expect(testBody.name).to.eql(req_name); //8. Проверить, что name в ответе равно name s request (name забрать из request. ",
									"}); ",
									" ",
									"pm.test(\"Age\", function () {   ",
									"    pm.expect(testBody.age).to.eql(req_u_age); //Проверить, что age в ответе равно age s request (age забрать из request.) ",
									"}); ",
									" ",
									"pm.test(\"Salary\", function () {   ",
									"    pm.expect(testBody.salary).to.eql(req_salary); //10.Проверить, что salary в ответе равно salary s request (salary забрать из request.) ",
									"}); ",
									"console.log(\"family = \" + testBody.family.children) //11. Вывести в консоль параметр family из response. ",
									" ",
									"console.log( testBody.family.u_salary_1_5_year + \"==\" + (reqBody_test.salary)*4) //12.Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "AntonEnot",
									"type": "text"
								},
								{
									"key": "age",
									"value": "30",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "5000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Theree_test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//. Отправить запрос.",
									"//2. Статус код 200",
									"",
									"let resp_test_Body = pm.response.json(); //3. Спарсить response body в json.",
									"",
									"let reqB_test = request.data;  //4. Спарсить request.",
									"//console.log(reqB_test); // проверка",
									"",
									"let req_name  = reqB_test.name;",
									"let req_age = reqB_test.age;",
									"let req_salary = reqB_test.salary;",
									"",
									"",
									"pm.test(\"Name\", function () {   ",
									"    pm.expect(reqB_test.name).to.eql(req_name);     //5. Проверить, что name в ответе равно name s request (name забрать из request.)",
									"}); ",
									"",
									"pm.test(\"Age\", function () {   ",
									"    pm.expect(reqB_test.age).to.eql(req_age);       //6. Проверить, что age в ответе равно age s request (age забрать из request.)",
									"}); ",
									"",
									"pm.test(\"Salary\", function () {   ",
									"    pm.expect(reqB_test.salary).to.eql(req_salary); //7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
									"}); ",
									"",
									"console.log(resp_test_Body.family)                                   //8. Вывести в консоль параметр family из response.",
									"",
									"pm.expect(resp_test_Body.family.pets.dog).to.have.any.keys(\"name\");  //9. Проверить, что у параметра dog есть параметры name.",
									"",
									"pm.expect(resp_test_Body.family.pets.dog).to.have.any.keys(\"age\");   //10. Проверить, что у параметра dog есть параметры age.",
									"pm.expect(resp_test_Body.family.pets.dog.name).to.eql(\"Luky\");       //11. Проверить, что параметр name имеет значение Luky.",
									"",
									"pm.expect(resp_test_Body.family.pets.dog.age).to.eql(4);             //12.Проверить, что параметр age имеет значение 4.",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "AntonKotEnot",
									"type": "text"
								},
								{
									"key": "age",
									"value": "30",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "5000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=AntonKotEnot&age=30&salary=5000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "AntonKotEnot"
								},
								{
									"key": "age",
									"value": "30"
								},
								{
									"key": "salary",
									"value": "5000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "For_test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Отправить запрос.",
									"//2. Статус код 200",
									"   ",
									"    let resp_test_Body = pm.response.json();  //Спарсить response body в json.",
									"    ",
									"    let req = pm.request.url.query.toObject(); // //4. Спарсить request   для GET!!",
									"    // console.log(resp_test_Body);  // проверка",
									"    let request_name = req.name; // спарсил  имя",
									"    let request_age = req.age;  // спарсил возвраст",
									"    ",
									"    ",
									"",
									" pm.test(\"Name\", function () {",
									"     pm.expect(req.name).to.eql(request_name); // 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
									" })",
									"",
									"",
									" pm.test(\"Age\", function () {",
									"     pm.expect(req.age).to.eql(request_age);",
									" })      //6. Проверить, что age в ответе равно age из request (age забрать из request.)",
									"",
									"",
									" console.log(req.salary + \" Проверка \") //7 Вывести в консоль параметр salary из request.",
									" console.log(resp_test_Body.salary) //8. Вывести в консоль параметр salary из response.",
									"",
									"",
									"  console.log(resp_test_Body.salary[0]) //9. Вывести в консоль 0-й элемент параметра salary параметр salary из response.",
									"  console.log(resp_test_Body.salary[1]) //10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
									"  console.log(resp_test_Body.salary[2]) //11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
									"",
									"",
									"// pm.environment.set(\"name\", \"Dan\");",
									"// //создаем переменную name в окружении HW_postman_2",
									"",
									"// pm.environment.set(\"age\", 30);",
									"// //создаем переменную age в окружении HW_postman_2",
									"",
									"// pm.environment.set(\"salary\", 700);",
									"",
									"      pm.expect(resp_test_Body.salary[0]).to.eql(+req.salary); //12Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
									"      pm.expect(+resp_test_Body.salary[1]).to.eql((+req.salary)*2);//13Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
									"      pm.expect(+resp_test_Body.salary[2]).to.eql((+req.salary)*3);  //14 Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
									"",
									"",
									" for ( var i in resp_test_Body.person){",
									"     console.log('${i} = ${resp_test_Body.person[i]}')",
									"     }//21 Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "age",
									"value": "{{age}}"
								},
								{
									"key": "salary",
									"value": "{{salary}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Five_test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1. Вставить параметр salary из окружения в request",
									"//2. Вставить параметр age из окружения в age",
									"//3. Вставить параметр name из окружения в name",
									"//4. Отправить запрос.",
									"//5. Статус код 200",
									"",
									"let res_for_Body = pm.response.json(); //6. Спарсить response body в json.",
									"let request_A = request.data;          //7. Спарсить request.",
									"",
									"",
									"//console.log(res_for_Body) // проверка ",
									"//console.log(res_for_Body) // проверка",
									"",
									"",
									"pm.test(\"Start_qa_salary\", function () {",
									"    pm.expect(res_for_Body).to.have.any.keys(\"start_qa_salary\");",
									"    //pm.expect(res_for_Body.start_qa_salary).to.eql(res_for_Body.start_qa_salary);   // так же тоже можно написать? ",
									"}); //8. Проверить, что json response имеет параметр start_qa_",
									"",
									" pm.test(\"Qa_salary_after_6_months\", function () {",
									"    // pm.expect(res_for_Body).to.have.any.keys(\"qa_salary_after_6_months\");          // так же тоже можно написать? ",
									"     pm.expect(res_for_Body.qa_salary_after_6_months).to.eql(res_for_Body.qa_salary_after_6_months);",
									" }); //9. Проверить, что json response имеет параметр qa_salary_after_6_months",
									"",
									"",
									" pm.test(\"Qa_salary_after_12_months\", function () {",
									"     pm.expect(res_for_Body).to.have.any.keys(\"qa_salary_after_12_months\");",
									"//     pm.expect(res_for_Body.qa_salary_after_12_months).to.eql(res_for_Body.qa_salary_after_12_months);",
									" }); //10. Проверить, что json response имеет параметр qa_salary_after_12_months",
									"",
									" pm.test(\"QA_salary_after_1.5_year\", function () {",
									"      pm.expect(res_for_Body).to.have.any.keys([\"qa_salary_after_1.5_year\"])",
									"     //pm.expect(res_for_Body.qa_salary_after_15_year).to.eql(res_for_Body.qa_salary_after_15_year);",
									"  }); //11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
									"",
									" pm.test(\"qa_salary_after_3.5_years\", function () {",
									"       pm.expect(res_for_Body).to.have.any.keys([\"qa_salary_after_3.5_years\"])",
									"//     pm.expect(res_for_Body.qa_salary_after_3).to.eql(res_for_Body.qa_salary_after_3);",
									" }); //12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
									"",
									"",
									" pm.test(\"Person\", function () {",
									"       pm.expect(res_for_Body).to.have.any.keys(\"person\")",
									"   //  pm.expect(res_for_Body.person).to.eql(res_for_Body.person);",
									" }); //13. Проверить, что json response имеет параметр person",
									"",
									"let request_A_Salary = +request_A.salary; // зачем то спарсили) ",
									"",
									"pm.test( \" 14  \" , function(){",
									"    pm.expect(res_for_Body.start_qa_salary).to.have.eql(request_A_Salary);",
									"})  //Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
									"",
									"  pm.test(\"qa_salary_after_6_months = salary*2  14000 \",function(){",
									"    pm.expect(res_for_Body.qa_salary_after_6_months).to.have.eql(request_A_Salary*2)",
									" })  //15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
									"",
									"",
									"   pm.test(\"qa_salary_after_12_months = salary*2.7  18900.0 \",function(){",
									"    pm.expect(res_for_Body.qa_salary_after_12_months).to.have.eql(request_A_Salary*2.7);",
									" }) //Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
									"",
									"    pm.test(\"qa_salary_after_1.5__months = salary*3.3  23100 \",function(){",
									"     pm.expect(res_for_Body[\"qa_salary_after_1.5_year\"]).to.have.eql(request_A_Salary*3.3)",
									"  }) //Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
									"",
									"    pm.test(\"qa_salary_after_3.5_months = salary*3.8  26600 \",function(){",
									"     pm.expect(res_for_Body[\"qa_salary_after_3.5_years\"]).to.have.eql(request_A_Salary*3.8)",
									"  }) //18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
									"",
									"",
									"    // let uSal = res_for_Body.u_name[1];",
									"",
									" pm.test(\"One elemens \",function(){",
									"      pm.expect(+res_for_Body.person.u_name[1]).to.have.eql(request_A_Salary)",
									"   })",
									"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
									"",
									"",
									" pm.test(\"Age elemens \",function(){",
									"      pm.expect(res_for_Body.person.u_age[0]).to.have.eql(request_A_Salary.u_age)",
									"   }) //20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
									"",
									"",
									" pm.test(\"U_salary_5_years  \",function(){",
									"      pm.expect(+res_for_Body.person.u_salary_5_years[0]).to.have.eql(request_A_Salary.u_salary_5_years*4.2)",
									"   }) //21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
									"",
									"",
									"",
									"",
									"    for ( var i in res_for_Body.person.u_name){",
									"      console.log('${i} = ${ res_for_Body.person.u_name [i] }')",
									"      }//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		}
	]
}